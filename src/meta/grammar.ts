export var grammar = {
    "<void-program>": "<void-sequence>?",
    "<T5-sequence>": "[<declaration>|<void-clause>];<T5-sequence><T5-clause>",
    "<void-sequence>": "<declaration>",
    "<void-clause>": "if<bool-clause>do<void-clause> | repeat<void-clause>while<bool-clause>{do<void—clause>} | while<bool-clause>do<void-clause> | for<int-identifier>=<int—c1ause>to<int-clause>{by<int-clause>}do<void—clause> | <write> | <T4—assign>:=<T4-clause> | <void-expression>",
    "<T5-clause>": "if<boo1—clause>then<T5-clause>else<T5-clause>| case<T4—clause>of[<T4-clause>{,T4-clause>}*:<T5-clause>;]*default:<T5-clause>| <T4-expression>",
    "<write>": "write<write.list>| output<file—clause>,<write.list>| out.byte<file-clause>,<int-clause>,<int—clause>",
    "<write.list>": "<T2—clause>{:<int-clause>}{,<write.list>}",
    "<T5-expression>": "<T5—exp3>",
    "<bool-expression>": "<bool-exp0>{or<bool-exp0>}*",
    "<bool-exp0>": "<bool—exp1>{and<bool-exp1>}*",
    "<bool—exp1>": "<T1-exp3>[<ang>|'<='|<gle>|'>=']|<T1-exp3>|<T4—exp2>[==|!=]<T4-exp2> |<pntr—exp3>[is|isnt]<structure-identifier>",
    "<bool-exp2>": "{~}<bool—exp3>",
    "<T5-exp2>": "<T5—exp3>",
    "<T5-exp3>": "<T5-exp4>",
    "<TO—exp3>": "<T0-exp4>[[+|—]<T0-exp4>]*",
    "<T5-exp4>": "<T5-exp5>",
    "<real—exp4>": "<real-exp5>[[<star>|/]<real—exp5>]*",
    "<int-exp4>": "<int—exp5>[[<star>|div|rem]<int-exp5>]*",
    "<T5—exp5>": "<T5—exp6>",
    "<T0-exp5>": "[+|—]<T0-exp6>",
    "<T5-exp6>": "<T5-exp7>",
    "<string-exp6>": "<string—exp7>[++<string-exp7>]*",
    "<T5-exp7>": "<T5-name> | <cur><T5-sequence><ly>| begin<T5—sequence>end",
    "<T4—exp7>": "(<T4-clause>)",
    "<T3-exp7>": "<T3—literal>",
    "<string—exp7>": "<string-expression>[(<int-clause><bar><int—clause>)]*",
    "<star-T4-exp7>": "@<int—clause>of<T4-type1><bra><T4-clause.list><ket> | vector<bounds>of<T4-clause>",
    "<bounds>": "<int—clause>::<int—clause>{,<bounds>}",
    "<T4—assign>": "<T4-identifier>|<T4—vec.exp>|<T4-struct.exp>",
    "<T4-vec.exp>": "<star-T4—expression>[(<int—clause.list>)]*",
    "<T4—struct.exp>": "<pntr-expression>[(<T4.field-identifier.list>)]*",
    "<T4-clause.list>": "<T4-clause>{,<T4—clause.list>}",
    "<pntr-name>": "<pntr-structure.creation>",
    "<T4—name>": "<T4-identifier> | <T4-vec.exp> | <T4-struct.exp>",
    "<T5-name>": "<T5—proc.call> | <T5-standard.name>",
    "<T5-proc.call>": "<T5.procedure-identifier>{(<args.list>)}",
    "<args.list>": "[<T4-clause>|<T5.procedure-identifier>|<structure—identifier>]{,<args.list>}",
    "<structure.creation>": "<structure-identifier>{(<T4-clause.list>)}",
    "<int—standard.name>": "[lwb|upb](<star-T4-clause>) | [readi|read.byte]{(<file-clause>)}",
    "<bool—standard.name>": "[eof|readb]{(<file-clause>)}",
    "<string-standard.name>": "[readlpeek|reads|read.name|read.a.line]{(<file-clause>)}",
    "<real-standard.name>": "readr{(<file-clause>)}",
    "<void-standard.nafie>": "abort",
    "<bool-literal>": "true | false",
    "<file-literal>": "nullfile",
    "<pntr-literal>": "nil",
    "<real—literal>": "<int-literal>{.<int-literal>}{e{+|—}<int-literal>}",
    "<int-literal>": "[<digit>]*",
    "<string-literal>": "\"{<char>}*\"",
    "<digit>": "0|1|2|3|4|5|6|7|8|9",
    "<char>": "<digit>[<char>] | <letter>[<char>]",
    "<T6—identifier>": "<letter>{<letter>|<digit>|.}*",
    "<letter>": "A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|a|b|c|d|e|f|g|h|i|j|k|i|m|n|o|p|q|r|s|t|u|v|w|x|y|z",
    "<declaration>": "<let.decl>|<structure.decl>|<procedure.decl>|<external>|<forward>",
    "<let.decl>": "let<T4—identifier>[=|:=]<T4—clause>",
    "<structure.decl>": "structure<structure—identifier>{(<field.list>)}",
    "<field.list>": "<T4-type1><T4.field-identifier.list>{;<field.list>}",
    "<procedure.decl>": "procedure<T5.procedure-identifier>{<T5—type.spec>};<T5-clause>",
    "<void—type.spec>": "(<param.list>)",
    "<T4-type.spec>": "({<param.list>}<arrow><T4-type>)",
    "<param.list>": "<param.spec>{;<param.list>}",
    "<param.spec>": "<T4-type1><T4-identifier.list>|<structure.decl>|<T5-proc.type><T5.procedure-identifier.list>",
    "<T5-proc.type>": "({<arg.type.list>}{<arrow><T4—type>})",
    "<arg.type.list>": "[<T4-type1>|<T5-proc.type><s.type>]{,<arg.type.list>}",
    "<s.type>": "structure{(<T4-type1>{,<T4—type1>}*)}",
    "<external>": "external<T5.procedure-identifier>{<T5-proc.type>}",
    "<forward>": "forward<T5.procedure-identifier>{<T5-proc.type>}",
    "<T6-identifier.list>": "<T6—identifier>{,<T6-identifier>}*",
    "<T4-type1>": "{c}<T4-type>",
    "<T4-type>": "int|real|boo||string|pntr|file|<star-T4-type>",
    "<star-T4-type>": "<star><T4-type1>",
    "<arrow>": "'—>'",
    "<cur>": "'{'",
    "<ly>": "'}'",
    "<bra>": "'['",
    "<ket>": "']'",
    "<star>": "'*'",
    "<ang>": "'<'",
    "<gle>": "'>'"
};