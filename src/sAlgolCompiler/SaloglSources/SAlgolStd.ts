export function stdLib() { return ["forward sqrt( creal -> real );",
    "forward exp( creal -> real );",
    "forward ln( creal -> real );",
    "forward sin( creal -> real );",
    "forward cos( creal -> real );",
    "forward atan( creal -> real );",
    "forward code( cint -> string );",
    "forward decode( cstring -> int );",
    "forward truncate( creal -> int );",
    "forward rabs( creal -> real );",
    "forward abs( cint -> int );",
    "forward length( cstring -> int );",
    "forward eformat(creal, cint, cint -> string );",
    "forward fformat(creal, cint, cint -> string );",
    "forward gformat( creal -> string );",
    "forward letter( cstring -> bool );",
    "forward digit( cstring -> bool );",
    "forward iformat( cint -> string );",
    "forward shift.l( cint, cint -> int );",
    "forward shift.r( cint, cint -> int );",
    "forward b.and( cint, cint -> int );",
    "forward b.or( cint, cint -> int );",
    "forward b.not( cint -> int );",
    "forward b.xor( cint, cint -> int );",
    "forward fiddle.r( creal -> *int );",
    "forward find.substr( cstring, cstring -> int );",
    "forward random( cint -> int );",
    "forward open( cstring, int -> file );",
    "forward create( cstring -> file );",
    "forward close( cfile);",
    "forward flush( cfile);",
    "forward seek( cfile, cint, cint);",
    "forward trace();",
    "forward date( -> string );",
    "forward time( -> int );",
    "forward draw(c#pixel, cpic, creal, creal, creal, creal);",
    "forward X.dim( c#pixel -> int );",
    "forward Y.dim( c#pixel -> int );",
    "forward locator( -> pntr );",
    "forward cursor.tip( cpntr -> pntr );",
    "forward cursor.on();",
    "forward cursor.off();",
    "forward Pixel( c#pixel, cint, cint -> pixel );",
    "forward variable.image( c#cpixel -> #pixel );",
    "forward fill( c#pixel, cpixel, cint, cint);",
    "forward make.menu( c#pixel, c*c#pixel, cbool -> pntr );",
    "forward call.menu( cpntr, cint, cint -> int );",
    "forward depth( c#pixel -> int );",
    "forward colour.map( cpixel, cint);",
    "forward colour.of(cpixel -> int );",
    "forward string.to.tile( cstring, cstring, cint -> #pixel );",
    "forward line.end( c#pixel, pixel, cint,cint,cint -> int );",
    "forward line( c#pixel, cint, cint, cint, cint, cint);",
    "forward clear.output();",
    "forward plane.of( c#pixel, cint -> *int );",
    "forward pixel.depth( cpixel -> int );",
    "forward input.pending( -> bool );",
    "forward interrupt( -> bool );",
    "forward interrupt.on();",
    "forward interrupt.off();",
    "structure mouse(cint X.pos,Y.pos ; cbool selected ; c*cbool the.buttons);",
    "structure point.strc( cint point.x,point.y );",
    "structure trnsfrm.strc( cint trnsfrm ; cpntr mrtre ; creal trnsfrm.x,trnsfrm.y );",
    "structure culr.strc( cpntr nxtre ; cpixel shade );",
    "structure oprtn.strc( cpntr lft,rght ; cint opoo );",
    "structure scrbl.strc( cstring msge ; creal xxl,yyl,xxr,yyr );",
    "structure poin.strc( creal pnx,pny );",
    "structure menu( c#pixel menu.image ; c*cint menu.dimensions.vector ; cbool vertical )",
    // "let Outline.error = \"'n***** S-algol Run-Time Error *****'n'n\";",
    // "let charry = @1 of *c*cint[ frst,scnd ];",
    // "let nilpic = text \"\" from 0,0 to 0,1?"
    "?"
];}